{"version":3,"sources":["components/TaskRow.js","components/TaksBanner.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","Task","name","type","checked","done","onChange","ToggleTask","key","TaskBaner","className","userName","TaskItem","filter","t","length","TaskCreator","useState","newTaskName","setNewTaskName","placeholder","value","e","target","onClick","Creator","VisibilityControl","isChecked","callback","description","App","setUserName","setTaskItem","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","task","map","TaskTableRows","doneValue","Key","id","find","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e0a1cee.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst TaskRow = (props) => {\r\n    \r\n    return ( \r\n<tr key={props.key}>\r\n              <td>{props.Task.name}</td>\r\n              <td> <input type=\"checkbox\"\r\n                          checked={props.Task.done} \r\n                          onChange={()=> props.ToggleTask(props.Task)}\r\n            /></td>\r\n            </tr>     );\r\n}\r\n \r\nexport default TaskRow;","import React from \"react\";\r\n\r\nconst TaskBaner = (props) => {\r\n    return ( \r\n        <h4 className=\"bg-primary text-white text center p-4\">\r\n           {props.userName} Task app ({props.TaskItem.filter(t=> !t.done).length} task for complete)\r\n        </h4>\r\n     );\r\n}\r\nexport default TaskBaner;","import React, {useState} from \"react\";\r\n\r\nconst TaskCreator = (props) => {\r\n\r\n  const [newTaskName, setNewTaskName] = useState(\"\")\r\n  const updateNewTaskName = (e)=>\r\n                                {\r\n                                    setNewTaskName(e.target.value);\r\n                                }\r\n\r\n   const createNewTask = ()=>{\r\n                                props.Creator(newTaskName);\r\n                                setNewTaskName(\"\");\r\n                             }\r\n\r\n\r\n    return (\r\n        <div className=\"my-1\">\r\n            <input type=\"text\" \r\n                   className=\"form-control w-50 alert-info m-1\"\r\n                   placeholder=\"Add new task \"\r\n                   value={newTaskName}\r\n                   onChange={updateNewTaskName}\r\n            />\r\n            <button className=\"btn btn-primary mt-1 m-1\" onClick={createNewTask}>\r\n                Add Task\r\n            </button>\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default TaskCreator;","import React from \"react\"\r\n\r\nconst VisibilityControl = (props) => {\r\n\r\n\r\n    return ( \r\n        <div className=\"form-check\">\r\n\r\n            <input type=\"checkbox\" \r\n                   className=\"form-check-input\" \r\n                   checked={props.isChecked}\r\n                   onChange={(e) => props.callback(e.target.checked)}\r\n            />\r\n            <label className=\"form-check-label\">\r\n                show  {props.description}\r\n            </label>\r\n\r\n        </div>\r\n\r\n     );\r\n}\r\n\r\nexport default VisibilityControl;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport TaskRow from './components/TaskRow';\nimport TaskBaner from './components/TaksBanner';\nimport TaskCreator from './components/TaskCreator';\nimport VisibilityControl from './components/VisibilityControl';\n\nfunction App() {\n\n  const [userName, setUserName] = useState(\"Topo\");\n\n  const [TaskItem, setTaskItem] = useState([  ])\n\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  useEffect(()=> {\n\n    let data = localStorage.getItem(\"task\");\n    if(data != null)\n    {\n      setTaskItem(JSON.parse(data))\n    }\n    else \n    {\n        setUserName(\"Topo local\")\n        setShowCompleted(true)\n        setTaskItem([])\n    }\n\n  },[])\n\n  useEffect(()=>\n              {\n                  localStorage.setItem('task', JSON.stringify(TaskItem))\n\n               },[TaskItem])\n\n\n  const CreateNewTask = (task)=>{\n                              if(!TaskItem.find(t=> t.name === task))\n                              {\n                                setTaskItem([...TaskItem, {id:4, name: task, done:false}] )\n      \n                              }\n                              else {\n                                alert(\"This task already exist, change the name\")\n                              }\n                            }\n\n  const ToggleTask = (task)=>\n                    { \n                        setTaskItem(TaskItem.map(e=>\n                          (e.name === task.name ? {...e, done: !e.done} : e)\n                          ))     \n                    }\n\n  const TaskTableRows = (doneValue)=>\n                      {\n                        return TaskItem.filter(task=> task.done === doneValue)\n                                       .map(task =>(\n                                                      <TaskRow \n                                                      Task={task}\n                                                      Key={task.id}\n                                                      ToggleTask={ToggleTask}\n                                                      />                \n                                                    ))\n                      }\n\n  return (\n    <div>\n      <TaskBaner userName={userName} TaskItem={TaskItem}/>\n      <TaskCreator Creator={CreateNewTask}/>\n\n      <table className=\"table table-striped table-border\">\n        <thead>\n          <tr>\n          <th>Description</th>\n          <th>Is Done?</th>\n          </tr>\n        </thead>\n        <tbody>\n            { \n              TaskTableRows(false)\n            } \n        </tbody>\n      </table>\n      <div className=\"bg-secondary text-center text-white\">\n          <VisibilityControl\n              isChecked={showCompleted}\n              callback={checked => setShowCompleted(checked)}\n              description=\"completed tasks\"\n          />\n      </div>\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-border\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Is done?</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {TaskTableRows(true)}\n              </tr>\n            </tbody>\n          </table>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}